---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This template will automatically deploy a reference architecture for the Pivotal Cloud Foundry stack.
  For a detailed guide on how to deploy this template, please read the instructions QS(qs-1ngltrcpf)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
        - PCFKeyPair
        - NATInstanceType
        - SSLCertificateARN
        - ElbPrefix
        - AllowHttpOnElb
        - ForwardLogOutput
      - Label:
          default: Network and DNS Configuration
        Parameters:
        - OpsManagerIngress
        - HostedZoneId
        - Domain
      - Label:
          default: Pivotal Cloud Foundry Configuration
        Parameters:
        - NumberOfAZs
        - SkipSSLValidation
        - PivnetToken
        - AdminEmail
        - OpsManagerAdminPassword
      - Label:
          default: RDS
        Parameters:
        - RdsDBName
        - RdsUsername
        - RdsPassword
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
        - QSS3BucketName
        - QSS3KeyPrefix
      - Label:
          default: End User License Agreement
        Parameters:
        - AcceptEULA
    ParameterLabels:
      RdsDBName:
        default: RDS DB Name
      RdsUsername:
        default: RDS Username
      RdsPassword:
        default: RDS Password
      NumberOfAZs:
        default: Number of Availability Zones
      SkipSSLValidation:
        default: Skip SSL Validation
      PivnetToken:
        default: Pivotal Network Token
      AdminEmail:
        default: Admin Email
      OpsManagerAdminPassword:
        default: Ops Manager Admin Password
      OpsManagerIngress:
        default: Ops Manager Ingress
      HostedZoneId:
        default: Route 53 Hosted Zone ID
      Domain:
        default: Domain
      PCFKeyPair:
        default: Keypair
      NATInstanceType:
        default: NAT Instance Type
      SSLCertificateARN:
        default: SSL Certificate ARN
      ElbPrefix:
        default: ELB Prefix
      AllowHttpOnElb:
        default: Allow HTTP on ELB
      ForwardLogOutput:
        default: Forward Log Output
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Bucket Prefix
      AcceptEULA:
        default: Accept EULA

Parameters:
  NATInstanceType:
    Type: String
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - m4.large
    - c4.large
    - m4.xlarge
    - c4.xlarge
    - c4.8xlarge
    ConstraintDescription: Instance Type must be of a valid EC2 type
    Default: t2.medium
    Description: Select the Instance Type to use for the NAT vm
  OpsManagerIngress:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR range allowed to connect to Pivotal Ops Manager instance
  RdsDBName:
    Type: String
    MinLength: '4'
    Default: bosh
    Description: Database name
  RdsUsername:
    Type: String
    Description: Database username
  RdsPassword:
    Type: String
    NoEcho: 'true'
    MinLength: '8'
    AllowedPattern: "[\\w-_]*"
    Description: Database password
  SSLCertificateARN:
    Type: String
    Description: ARN for pre-uploaded SSL certificate
  ElbPrefix:
    Type: String
    Description: Prefix for the name of the ELBs provisioned. (Required)
    MinLength: 1
    MaxLength: 19
  AllowHttpOnElb:
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
    Description: Allow HTTP traffic on PCF-ELB port 80.
  PivnetToken:
    Type: String
    Description: Pivotal Network token to accept EULA (requires registration). To generate a token, see
      https://network.pivotal.io/docs/api#how-to-authenticate
  AdminEmail:
    Type: String
    Description: Admin email used by mysql monitor, for example
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: Existing hosted zone in which to create DNS records
  Domain:
    Type: String
    Description: Root or subdomain for all Pivotal Cloud Foundry DNS entries (e.g. - example.com or pcf.example.com). Must match hosted zone.
  OpsManagerAdminPassword:
    Type: String
    NoEcho: 'true'
    MinLength: '14'
    AllowedPattern: "[\\w-_]*"
    Description: Admin password for Pivotal Ops Manager. At least 14 characters from the set of alphanumeric, dashes, and underscores.
  PCFKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select the SSH keypair to use for Pivotal Ops Manager and NAT instance
  NumberOfAZs:
    Type: Number
    AllowedValues: [1,2]
    Default: 1
    Description: Select number of Availability Zones. This changes the deployment size. 2 is a HA deployment, with nearly double the number of VMs
  ForwardLogOutput:
    Description: |
      When true, installation logs are sent to 'CloudWatch Logs'. Critical for solving failures, but
      potentially exposes secrets used during the bootstrap process.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  SkipSSLValidation:
    Description: |
      When true, SSL certificates are not validated. *Not recommended for a production environment*
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
  QSS3BucketName:
      AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
      ConstraintDescription: Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
      Default: quickstart-reference
      Description: S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
      Type: String
  QSS3KeyPrefix:
      AllowedPattern: "^[0-9a-zA-Z-/]*$"
      ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
      Default: pivotal/cloudfoundry/latest/
      Description: S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
      Type: String
  AcceptEULA:
    Description: Accept Pivotal EULA
    Type: String
    Default: 'No'
    AllowedValues:
    - 'No'
    - 'Yes'

Rules:
  KeyPairsNotEmpty:
    Assertions:
    - Assert:
        Fn::Not:
        - Fn::EachMemberEquals:
          - Fn::RefAll: AWS::EC2::KeyPair::KeyName
          - ""
      AssertDescription: All key pair parameters must not be empty
  SupportedRegionRule:
      Assertions:
      - Assert:
          Fn::Contains:
          - [us-east-1, us-west-1, us-west-2, eu-west-1, ap-southeast-1, ap-northeast-1, ap-northeast-2, sa-east-1, eu-central-1, ap-southeast-2]

          - !Ref AWS::Region
        AssertDescription: This Quick Start is only available in a subset of regions. [us-east-1, us-west-1, us-west-2, eu-west-1, ap-southeast-1, ap-northeast-1, ap-northeast-2, sa-east-1, eu-central-1, ap-southeast-2]

  AcceptEULARule:
    Assertions:
    - Assert:
        Fn::Equals:
        - !Ref AcceptEULA
        - "Yes"
      AssertDescription: Must accept the End User License Agreement for Pivotal Products
Mappings:
  AMIMapping:
    ap-northeast-1:
      bootstrap: ami-fb59b29d
      opsman: ami-bb54b6dd
    ap-northeast-2:
      bootstrap: ami-7621f818
      opsman: ami-24a57c4a
    ap-south-1:
      bootstrap: ami-09334966
      opsman: ami-12c0b87d
    ap-southeast-1:
      bootstrap: ami-23d54d40
      opsman: ami-22f06d41
    ap-southeast-2:
      bootstrap: ami-61c9d002
      opsman: ami-96b5aaf5
    ca-central-1:
      bootstrap: ami-e7da6483
      opsman: ami-dd0eb1b9
    eu-central-1:
      bootstrap: ami-dc903eb3
      opsman: ami-e565c98a
    eu-west-1:
      bootstrap: ami-6808fe11
      opsman: ami-1f2ec566
    eu-west-2:
      bootstrap: ami-c0cfdea4
      opsman: ami-7b1e0f1f
    sa-east-1:
      bootstrap: ami-769ee81a
      opsman: ami-6ba5d207
    us-east-1:
      bootstrap: ami-ebd1fe90
      opsman: ami-dae3bca1
    us-east-2:
      bootstrap: ami-72d0f017
      opsman: ami-32341457
    us-west-1:
      bootstrap: ami-c90229a9
      opsman: ami-6b4d650b
    us-west-2:
      bootstrap: ami-8d01e0f5
      opsman: ami-ca879db3
Resources:
  ## cloud-formation.json
  PCFBase:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        01NATKeyPair: !Ref PCFKeyPair
        02NATInstanceType: !Ref NATInstanceType
        03OpsManagerIngress: !Ref OpsManagerIngress
        04RdsDBName: !Ref RdsDBName
        05RdsUsername: !Ref RdsUsername
        06RdsPassword: !Ref RdsPassword
        07SSLCertificateARN: !Ref SSLCertificateARN
        08OpsManagerTemplate: !Sub "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/ops-manager.template"
        09ElbPrefix: !Ref ElbPrefix
        10AllowHttpOnElb: !Ref AllowHttpOnElb
        11PivnetToken: !Ref PivnetToken
        12AdminEmail: !Ref AdminEmail
      TemplateURL: !Sub "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/cloud-formation.template"
  ## Custom resource stuff
  CustomResourceSQSQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: CustomResourceSQSQueue
      VisibilityTimeout: 1
  CustomResourceSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: custom-resource-topic
      Subscription:
        - Endpoint: !GetAtt CustomResourceSQSQueue.Arn
          Protocol: sqs
  CustomResourceSQSQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "sqs:SendMessage"
            Resource: !GetAtt CustomResourceSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref CustomResourceSNSTopic
      Queues:
        - !Ref CustomResourceSQSQueue
  MyCustomBOSH:
    Type: Custom::BOSH
    Version: 1.0
    Properties:
      ServiceToken: !Ref CustomResourceSNSTopic
    DependsOn:
    - CustomResourceSQSQueuePolicy
    - BootstrapInstance
    - OpsManagerInstance
    - DNSOpsMan
    - DNSSys
    - DNSStar
    - DNS
    - DNSApps
    - PCFDescribeStackPolicy
    - PCFParameterStorePolicy
    - PCFCustomResourcePolicy
    - PCFEmitLogsPolicy
    - SSMParameterJSON
  WaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"
  WaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Properties:
      Handle:
        Ref: "WaitHandle"
      Timeout: "14400"
      Count: 1
  ## This Policy is for Allowing the OpsManager EC2 Instance access to the Describe stack and
  ## Stored Parameters.
  PCFDescribeStackPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "cloudformation:DescribeStacks"
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
      PolicyName: !Sub ${AWS::StackName}-describe-stack
      Roles:
        - !GetAtt PCFBase.Outputs.PcfIamRole
  PCFParameterStorePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "ssm:DescribeParameters"
              - "ssm:GetParameters"
              - "ssm:GetParameter"
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.*"
      PolicyName: !Sub ${AWS::StackName}-parameter-store
      Roles:
        - !GetAtt PCFBase.Outputs.PcfIamRole
  PCFCustomResourcePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "sqs:*"
            Resource: !GetAtt CustomResourceSQSQueue.Arn
      PolicyName: !Sub ${AWS::StackName}-custom-resource
      Roles:
        - !GetAtt PCFBase.Outputs.PcfIamRole
  PCFEmitLogsPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:pcf-bootstrap-${AWS::StackName}:*"
      PolicyName: !Sub ${AWS::StackName}-emit-logs-policy
      Roles:
        - !GetAtt PCFBase.Outputs.PcfIamRole
  ## This is the Start of our Secured Parameters
  SSMParameterJSON:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "${AWS::StackName}.SSMParameterJSON"
      Description: JSON Array of All SSM Passed Parameters
      Type: String
      Value: !Sub |
        {
        "PcfRdsPassword": "${PCFBase.Outputs.PcfRdsPassword}",
        "PcfPublicSubnetId2": "${PCFBase.Outputs.PcfPublicSubnetId2}",
        "PcfElasticRuntimeS3PackagesBucket": "${PCFBase.Outputs.PcfElasticRuntimeS3PackagesBucket}",
        "PcfNumberOfAZs": "${NumberOfAZs}",
        "PcfPublicSubnetAvailabilityZone": "${PCFBase.Outputs.PcfPublicSubnetAvailabilityZone}",
        "PcfIamRole": "${PCFBase.Outputs.PcfIamRole}",
        "PcfElasticRuntimeS3ResourcesBucket": "${PCFBase.Outputs.PcfElasticRuntimeS3ResourcesBucket}",
        "PcfRdsPort": "${PCFBase.Outputs.PcfRdsPort}",
        "PcfOpsManagerS3Bucket": "${PCFBase.Outputs.PcfOpsManagerS3Bucket}",
        "PcfIamUserName": "${PCFBase.Outputs.PcfIamUserName}",
        "PcfPublicSubnetAvailabilityZone2": "${PCFBase.Outputs.PcfPublicSubnetAvailabilityZone2}",
        "PcfPrivateSubnetId": "${PCFBase.Outputs.PcfPrivateSubnetId}",
        "PcfIamUserAccessKey": "${PCFBase.Outputs.PcfIamUserAccessKey}",
        "PcfPublicSubnetId": "${PCFBase.Outputs.PcfPublicSubnetId}",
        "PcfRdsDBName": "${PCFBase.Outputs.PcfRdsDBName}",
        "PcfVmsSecurityGroupId": "${PCFBase.Outputs.PcfVmsSecurityGroupId}",
        "PcfElbTcpDnsName": "${PCFBase.Outputs.PcfElbTcpDnsName}",
        "PcfPrivateSubnet2AvailabilityZone": "${PCFBase.Outputs.PcfPrivateSubnet2AvailabilityZone}",
        "PcfWaitHandle": "${WaitHandle}",
        "PcfOpsManagerAdminPassword": "${OpsManagerAdminPassword}",
        "PcfRdsAddress": "${PCFBase.Outputs.PcfRdsAddress}",
        "PcfElbDnsName": "${PCFBase.Outputs.PcfElbDnsName}",
        "PcfOpsManagerInstanceIP": "${OpsManagerInstance.PublicIp}",
        "PcfPrivateSubnetAvailabilityZone": "${PCFBase.Outputs.PcfPrivateSubnetAvailabilityZone}",
        "PcfCustomResourceSQSQueueUrl": "${CustomResourceSQSQueue}",
        "PcfVpc": "${PCFBase.Outputs.PcfVpc}",
        "PcfElasticRuntimeS3DropletsBucket": "${PCFBase.Outputs.PcfElasticRuntimeS3DropletsBucket}",
        "PcfPrivateSubnet2Id": "${PCFBase.Outputs.PcfPrivateSubnet2Id}",
        "PcfIamUserSecretAccessKey": "${PCFBase.Outputs.PcfIamUserSecretAccessKey}",
        "PcfElbSshDnsName": "${PCFBase.Outputs.PcfElbSshDnsName}",
        "PcfElasticRuntimeS3BuildpacksBucket": "${PCFBase.Outputs.PcfElasticRuntimeS3BuildpacksBucket}",
        "PcfOpsManagerSecurityGroupId": "${PCFBase.Outputs.PcfOpsManagerSecurityGroupId}",
        "PcfRdsUsername": "${PCFBase.Outputs.PcfRdsUsername}"
        }
  ## This is the End of our Secured Parameters
  ## This is the EC2 Ops Manager
  OpsManagerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [AMIMapping, !Ref "AWS::Region", "opsman"]
      InstanceType: m4.large
      IamInstanceProfile: !GetAtt PCFBase.Outputs.PcfIamInstanceProfile
      KeyName: !Ref PCFKeyPair
      Monitoring: true
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 100
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !GetAtt PCFBase.Outputs.PcfOpsManagerSecurityGroupId
          SubnetId: !GetAtt PCFBase.Outputs.PcfPublicSubnetId
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: "PCF Ops Manager"
  BootstrapInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    DependsOn: OpsManagerInstance
    Properties:
      ImageId: !FindInMap [AMIMapping, !Ref "AWS::Region", "bootstrap"]
      InstanceType: t2.micro
      IamInstanceProfile: !GetAtt PCFBase.Outputs.PcfIamInstanceProfile
      KeyName: !Ref PCFKeyPair
      Monitoring: true
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 50
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !GetAtt PCFBase.Outputs.PcfOpsManagerSecurityGroupId
          SubnetId: !GetAtt PCFBase.Outputs.PcfPublicSubnetId
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: "PCF Bootstrap"
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash

          cfn-init -v --stack ${AWS::StackName} --resource BootstrapInstance --region ${AWS::Region}
          cfn-signal -e $? --stack ${AWS::StackName} --resource BootstrapInstance --region ${AWS::Region}

          su ubuntu -c /home/ubuntu/quickstart/bootstrap.sh
    Metadata:
      AWS::CloudFormation::Init:
        config:
          sources:
            '/home/ubuntu': !Sub "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/quickstart.tgz"
          files:
            /home/ubuntu/scripts/awslogs.config:
              owner: ubuntu
              group: ubuntu
              content: !Sub |
                [general]
                state_file = /var/awslogs/state/agent-state

                [/var/log/syslog]
                file = /var/log/syslog
                log_group_name = pcf-bootstrap-${AWS::StackName}
                log_stream_name = syslog
                datetime_format = %b %d %H:%M:%S

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = pcf-bootstrap-${AWS::StackName}
                log_stream_name = cloud-init-output.log

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = pcf-bootstrap-${AWS::StackName}
                log_stream_name = cloud-init.log

                [/var/log/cfn-init-cmd.log]
                file = /var/log/cfn-init-cmd.log
                log_group_name = pcf-bootstrap-${AWS::StackName}
                log_stream_name = cfn-init-cmd.log

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = pcf-bootstrap-${AWS::StackName}
                log_stream_name = cfn-init.log

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = pcf-bootstrap-${AWS::StackName}
                log_stream_name = cfn-wire.log
            /var/local/cloudformation/stack-meta.json:
              content: !Sub |
                {"StackName":"${AWS::StackName}","StackId":"${AWS::StackId}","Region":"${AWS::Region}"}
              mode: '000755'
          commands:
            a_log_setup:
              command: !Sub |
                if "${ForwardLogOutput}" == "true"; then
                   echo "Setting up CloudWatch Logs."
                   python3 /home/ubuntu/scripts/awslogs-agent-setup.py -n -r ${AWS::Region} -c /home/ubuntu/scripts/awslogs.config
                else
                  echo "Skipping CloudWatch Logs, ForwardLogOutput was false"
                fi
            b_chmod_stuff:
              command: |
                chown -R ubuntu:ubuntu /home/ubuntu/quickstart
            c_copy_version_confifg_to_known_location:
              command: |
                cp /home/ubuntu/quickstart/version_config.json /var/local/version_config.json
            d_install_delete_daemon:
              command: |
                /home/ubuntu/quickstart/daemon/install.sh

  DNSOpsMan:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub opsman.${Domain}
      ResourceRecords:
        - !Sub "${OpsManagerInstance.PublicIp}"
      TTL: 60
      Type: A
  DNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub bootstrap.${Domain}
      ResourceRecords:
        - !Sub "${BootstrapInstance.PublicIp}"
      TTL: 60
      Type: A
  DNSStar:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "*.${Domain}"
      ResourceRecords:
        - !GetAtt PCFBase.Outputs.PcfElbDnsName
      TTL: 60
      Type: CNAME
  DNSSsh:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub ssh.sys.${Domain}
      ResourceRecords:
        - !GetAtt PCFBase.Outputs.PcfElbSshDnsName
      TTL: 60
      Type: CNAME
  DNSSys:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "*.sys.${Domain}"
      ResourceRecords:
        - !GetAtt PCFBase.Outputs.PcfElbDnsName
      TTL: 60
      Type: CNAME
  DNSApps:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "*.apps.${Domain}"
      ResourceRecords:
        - !GetAtt PCFBase.Outputs.PcfElbDnsName
      TTL: 60
      Type: CNAME
Outputs:
  OpsManager:
    Description: Url For Logging into OpsManager
    Value: !Sub "https://opsman.${Domain}"